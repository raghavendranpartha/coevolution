gogaf2.filt <- filter(gogaf2, !V5 %in% filter(gogaf2.byterm,ngenes>500)$V5)
write.table(gogaf2.filt, file = '../data/public/GOgaf/goa_human.onlyexperimental.gaf',
quote = F, sep = '\t', row.names = F)
gogaf2.bygene <- group_by(gogaf2, V3) %>% summarise(terms = paste(unique(V5), collapse = ","), nterms = length(unique(V5)))
gogaf2.byterm <- group_by(gogaf2, V5) %>% summarise(genes = paste(unique(V3), collapse = ","), ngenes = length(unique(V3)))
gogaf2.filt <- filter(gogaf2, !V5 %in% filter(gogaf2.byterm,ngenes>500)$V5)
write.table(gogaf2.filt, file = '../data/public/GOgaf/goa_human.onlyexperimental.gaf',
quote = F, sep = '\t', row.names = F)
gogaf.bygene <- group_by(gogaf, V3) %>% summarise(terms = paste(unique(V5), collapse = ","), nterms = length(unique(V5)))
gogaf.byterm <- group_by(gogaf, V5) %>% summarise(genes = paste(unique(V3), collapse = ","), ngenes = length(unique(V3)))
gogaf.filt <- filter(gogaf, !V5 %in% filter(gogaf.byterm,ngenes>500)$V5)
View(gogaf2.filt)
table(gogaf2$V7)
require(dplyr)
require(data.table)
require(ggplot2)
for(onttype in c('CC','MF','BP')){
#for(onttype in c('CC','MF')){
#onttype <- 'BP'
assign(paste0('top100k',onttype),
readRDS(paste0('../data/geneSimBP/',onttype,'/top.sumfterc5.bestbitscorepclt10.tsv.rds')))
assign(paste0('bgd500k',onttype),
readRDS(paste0('../data/geneSimBP/',onttype,'/controlndatasetsmatched.top.sumfterc5.bestbitscorepclt10.tsv.rds')))
}
toppairs <- fread('../data/toperc/top.sumfterc5.bestbitscorepclt10.tsv', header = T) %>%
mutate(pair = as.character(pair)) %>% filter(pair %in% names(top100kCC))
controltoppairs <- fread('../data/toperc/controlndatasetsmatched.top.sumfterc5.bestbitscorepclt10.tsv') %>%
mutate(pair = as.character(pair)) %>%
filter(pair %in% names(bgd500kCC))
toppairs$mfsemsim <- top100kMF[toppairs$pair]
controltoppairs$mfsemsim <- bgd500kMF[controltoppairs$pair]
toppairs$bpsemsim <- top100kBP[toppairs$pair]
controltoppairs$bpsemsim <- bgd500kBP[controltoppairs$pair]
toppairs$ccsemsim <- top100kCC[toppairs$pair]
controltoppairs$ccsemsim <- bgd500kCC[controltoppairs$pair]
ns <- c(1000,10000,100000)
for(nn in ns){
print(wilcox.test(toppairs[1:nn,]$mfsemsim, controltoppairs$mfsemsim, alternative = 'g')$p.value)
print(wilcox.test(toppairs[1:nn,]$ccsemsim, controltoppairs$ccsemsim, alternative = 'g')$p.value)
print(wilcox.test(toppairs[1:nn,]$bpsemsim, controltoppairs$bpsemsim, alternative = 'g')$p.value)
}
require(dplyr)
require(data.table)
require(ggplot2)
for(onttype in c('CC','MF','BP')){
#for(onttype in c('CC','MF')){
#onttype <- 'BP'
assign(paste0('top100k',onttype),
readRDS(paste0('../data/geneSim/',onttype,'/top.sumfterc5.bestbitscorepclt10.tsv.rds')))
assign(paste0('bgd500k',onttype),
readRDS(paste0('../data/geneSim/',onttype,'/controlndatasetsmatched.top.sumfterc5.bestbitscorepclt10.tsv.rds')))
}
toppairs <- fread('../data/toperc/top.sumfterc5.bestbitscorepclt10.tsv', header = T) %>%
mutate(pair = as.character(pair)) %>% filter(pair %in% names(top100kCC))
controltoppairs <- fread('../data/toperc/controlndatasetsmatched.top.sumfterc5.bestbitscorepclt10.tsv') %>%
mutate(pair = as.character(pair)) %>%
filter(pair %in% names(bgd500kCC))
toppairs$mfsemsim <- top100kMF[toppairs$pair]
controltoppairs$mfsemsim <- bgd500kMF[controltoppairs$pair]
toppairs$bpsemsim <- top100kBP[toppairs$pair]
controltoppairs$bpsemsim <- bgd500kBP[controltoppairs$pair]
toppairs$ccsemsim <- top100kCC[toppairs$pair]
controltoppairs$ccsemsim <- bgd500kCC[controltoppairs$pair]
ns <- c(1000,10000,100000)
for(nn in ns){
print(wilcox.test(toppairs[1:nn,]$mfsemsim, controltoppairs$mfsemsim, alternative = 'g')$p.value)
print(wilcox.test(toppairs[1:nn,]$ccsemsim, controltoppairs$ccsemsim, alternative = 'g')$p.value)
print(wilcox.test(toppairs[1:nn,]$bpsemsim, controltoppairs$bpsemsim, alternative = 'g')$p.value)
}
controltoppairs.control <- filter(controltoppairs, interc > -2, interc < 2)
ns <- c(1000,10000,100000)
for(nn in ns){
print(wilcox.test(toppairs[1:nn,]$mfsemsim, controltoppairs.control$mfsemsim, alternative = 'g')$p.value)
print(wilcox.test(toppairs[1:nn,]$ccsemsim, controltoppairs.control$ccsemsim, alternative = 'g')$p.value)
print(wilcox.test(toppairs[1:nn,]$bpsemsim, controltoppairs.control$bpsemsim, alternative = 'g')$p.value)
}
controltoppairs.control <- controltoppairs
ns <- c(1000,10000,100000)
for(nn in ns){
print(wilcox.test(toppairs[1:nn,]$mfsemsim, controltoppairs.control$mfsemsim, alternative = 'g')$p.value)
print(wilcox.test(toppairs[1:nn,]$ccsemsim, controltoppairs.control$ccsemsim, alternative = 'g')$p.value)
print(wilcox.test(toppairs[1:nn,]$bpsemsim, controltoppairs.control$bpsemsim, alternative = 'g')$p.value)
}
bpx <- qqplot(controltoppairs.control$ccsemsim, toppairs[1:10000,]$bpsemsim, col = 'red',plot = F)
bpx2 <- qqplot(controltoppairs.control$ccsemsim, toppairs[1:1000,]$bpsemsim, col = 'red',plot = F)
mfx <- qqplot(controltoppairs.control$mfsemsim, toppairs[1:10000,]$mfsemsim, col = 'red',plot = F)
mfx2 <- qqplot(controltoppairs.control$mfsemsim, toppairs[1:1000,]$mfsemsim, col = 'red',plot = F)
ccx <- qqplot(controltoppairs.control$ccsemsim, toppairs[1:10000,]$ccsemsim, col = 'red',plot = F)
ccx2 <- qqplot(controltoppairs.control$ccsemsim, toppairs[1:1000,]$ccsemsim, col = 'red',plot = F)
par(mfrow=c(1,3))
qqplot(controltoppairs.control$bpsemsim, toppairs$bpsemsim, xlab = 'Control pairs', ylab = 'Top pairs', main = '', type = 'l',
lwd = 2,cex.lab=1.25)
title('A. Biological Pathway', adj = 0, font.main = 1, cex.main = 1.5)
lines(bpx[['x']],bpx[['y']], col = 'red',lwd = 2)
lines(bpx2[['x']],bpx2[['y']], col = 'blue',lwd = 2)
legend('bottomright',c('Top 1000','Top 10,000','Top 100,000'), col = c('blue','red','black'),bty = 'n', pch = 19, cex = 1.25,
title = 'Dataset')
abline(a=0,b=1,lty=2,lwd=2)
qqplot(controltoppairs.control$ccsemsim, toppairs[1:100000,]$ccsemsim, xlab = 'Control pairs', ylab = 'Top pairs', main = '',
type = 'l', lwd = 2, cex.lab = 1.25)
title('B. Cellular Component', adj = 0, font.main = 1, cex.main = 1.5)
lines(ccx[['x']],ccx[['y']], col = 'red', lwd = 2)
lines(ccx2[['x']],ccx2[['y']], col = 'blue', lwd = 2)
legend('bottomright',c('Top 1000','Top 10,000','Top 100,000'), col = c('blue','red','black'),bty = 'n', pch = 19, cex = 1.25,
title = 'Dataset')
abline(a=0,b=1, lty = 2, lwd = 2)
qqplot(controltoppairs.control$mfsemsim, toppairs$mfsemsim, xlab = 'Control pairs', ylab = 'Top pairs', main = '', type = 'l',
lwd = 2, cex.lab = 1.25)
title('C. Molecular Function', adj = 0, font.main = 1, cex.main = 1.5)
lines(mfx[['x']],mfx[['y']], col = 'red', lwd = 2)
lines(mfx2[['x']],mfx2[['y']], col = 'blue', lwd = 2)
legend('bottomright',c('Top 1000','Top 10,000','Top 100,000'), col = c('blue','red','black'),bty = 'n', pch = 19, cex = 1.25,
title = 'Dataset')
abline(a=0,b=1, lty = 2, lwd = 2)
ns <- c(1000,10000,100000)
for(nn in ns){
mfp <- wilcox.test(toppairs[1:nn,]$mfsemsim, controltoppairs.control$mfsemsim, alternative = 'g')$p.value
ccp <- wilcox.test(toppairs[1:nn,]$ccsemsim, controltoppairs.control$ccsemsim, alternative = 'g')$p.value
bpp <- wilcox.test(toppairs[1:nn,]$bpsemsim, controltoppairs.control$bpsemsim, alternative = 'g')$p.value
print(paste0(nn,':',bpp,',',ccp,',',mfp))
}
ns <- c(1000,10000,100000)
for(nn in ns){
mfp <- wilcox.test(toppairs[1:nn,]$mfsemsim, controltoppairs.control$mfsemsim, alternative = 'g')$p.value
ccp <- wilcox.test(toppairs[1:nn,]$ccsemsim, controltoppairs.control$ccsemsim, alternative = 'g')$p.value
bpp <- wilcox.test(toppairs[1:nn,]$bpsemsim, controltoppairs.control$bpsemsim, alternative = 'g')$p.value
print(paste0(nn,':',format(bpp, width = 5),',',format(ccp, width = 5),',',format(mfp, width = 5)))
}
ns <- c(1000,10000,100000)
for(nn in ns){
mfp <- wilcox.test(toppairs[1:nn,]$mfsemsim, controltoppairs.control$mfsemsim, alternative = 'g')$p.value
ccp <- wilcox.test(toppairs[1:nn,]$ccsemsim, controltoppairs.control$ccsemsim, alternative = 'g')$p.value
bpp <- wilcox.test(toppairs[1:nn,]$bpsemsim, controltoppairs.control$bpsemsim, alternative = 'g')$p.value
print(paste0(nn,':',format(bpp, width = 5),',',format(ccp, width = 2),',',format(mfp, width = 5)))
}
?formatC
formatC(mfp,3)
ns <- c(1000,10000,100000)
for(nn in ns){
mfp <- wilcox.test(toppairs[1:nn,]$mfsemsim, controltoppairs.control$mfsemsim, alternative = 'g')$p.value
ccp <- wilcox.test(toppairs[1:nn,]$ccsemsim, controltoppairs.control$ccsemsim, alternative = 'g')$p.value
bpp <- wilcox.test(toppairs[1:nn,]$bpsemsim, controltoppairs.control$bpsemsim, alternative = 'g')$p.value
print(paste0(nn,':',formatC(bpp, 3),',',formatC(ccp, 3),',',format(mfp, 3)))
}
pdf('../figures/gosemsim.pdf',height = 4, width = 8,family='FreeSans')
par(mfrow=c(1,3))
qqplot(controltoppairs.control$bpsemsim, toppairs$bpsemsim, xlab = 'Control pairs', ylab = 'Top pairs', main = '', type = 'l',
lwd = 2,cex.lab=1.25)
title('A. Biological Pathway', adj = 0, font.main = 1, cex.main = 1.5)
lines(bpx[['x']],bpx[['y']], col = 'red',lwd = 2)
lines(bpx2[['x']],bpx2[['y']], col = 'blue',lwd = 2)
legend('bottomright',c('Top 1000','Top 10,000','Top 100,000'), col = c('blue','red','black'),bty = 'n', pch = 19, cex = 1.25,
title = 'Dataset')
abline(a=0,b=1,lty=2,lwd=2)
qqplot(controltoppairs.control$ccsemsim, toppairs[1:100000,]$ccsemsim, xlab = 'Control pairs', ylab = 'Top pairs', main = '',
type = 'l', lwd = 2, cex.lab = 1.25)
title('B. Cellular Component', adj = 0, font.main = 1, cex.main = 1.5)
lines(ccx[['x']],ccx[['y']], col = 'red', lwd = 2)
lines(ccx2[['x']],ccx2[['y']], col = 'blue', lwd = 2)
legend('bottomright',c('Top 1000','Top 10,000','Top 100,000'), col = c('blue','red','black'),bty = 'n', pch = 19, cex = 1.25,
title = 'Dataset')
abline(a=0,b=1, lty = 2, lwd = 2)
qqplot(controltoppairs.control$mfsemsim, toppairs$mfsemsim, xlab = 'Control pairs', ylab = 'Top pairs', main = '', type = 'l',
lwd = 2, cex.lab = 1.25)
title('C. Molecular Function', adj = 0, font.main = 1, cex.main = 1.5)
lines(mfx[['x']],mfx[['y']], col = 'red', lwd = 2)
lines(mfx2[['x']],mfx2[['y']], col = 'blue', lwd = 2)
legend('bottomright',c('Top 1000','Top 10,000','Top 100,000'), col = c('blue','red','black'),bty = 'n', pch = 19, cex = 1.25,
title = 'Dataset')
abline(a=0,b=1, lty = 2, lwd = 2)
dev.off()
source('../code/funcsERCfromProjections.R')
pdf('../figures/gosemsim.pdf',height = 4, width = 8,family='FreeSans')
par(mfrow=c(1,3))
qqplot(controltoppairs.control$bpsemsim, toppairs$bpsemsim, xlab = 'Control pairs', ylab = 'Top pairs', main = '', type = 'l',
lwd = 2,cex.lab=1.25)
title('A. Biological Pathway', adj = 0, font.main = 1, cex.main = 1.5)
lines(bpx[['x']],bpx[['y']], col = 'red',lwd = 2)
lines(bpx2[['x']],bpx2[['y']], col = 'blue',lwd = 2)
legend('bottomright',c('Top 1000','Top 10,000','Top 100,000'), col = c('blue','red','black'),bty = 'n', pch = 19, cex = 1.25,
title = 'Dataset')
abline(a=0,b=1,lty=2,lwd=2)
qqplot(controltoppairs.control$ccsemsim, toppairs[1:100000,]$ccsemsim, xlab = 'Control pairs', ylab = 'Top pairs', main = '',
type = 'l', lwd = 2, cex.lab = 1.25)
title('B. Cellular Component', adj = 0, font.main = 1, cex.main = 1.5)
lines(ccx[['x']],ccx[['y']], col = 'red', lwd = 2)
lines(ccx2[['x']],ccx2[['y']], col = 'blue', lwd = 2)
legend('bottomright',c('Top 1000','Top 10,000','Top 100,000'), col = c('blue','red','black'),bty = 'n', pch = 19, cex = 1.25,
title = 'Dataset')
abline(a=0,b=1, lty = 2, lwd = 2)
qqplot(controltoppairs.control$mfsemsim, toppairs$mfsemsim, xlab = 'Control pairs', ylab = 'Top pairs', main = '', type = 'l',
lwd = 2, cex.lab = 1.25)
title('C. Molecular Function', adj = 0, font.main = 1, cex.main = 1.5)
lines(mfx[['x']],mfx[['y']], col = 'red', lwd = 2)
lines(mfx2[['x']],mfx2[['y']], col = 'blue', lwd = 2)
legend('bottomright',c('Top 1000','Top 10,000','Top 100,000'), col = c('blue','red','black'),bty = 'n', pch = 19, cex = 1.25,
title = 'Dataset')
abline(a=0,b=1, lty = 2, lwd = 2)
dev.off()
library(extrafont)
#font_import()
loadfonts(device="pdf")       #Register fonts for Windows bitmap output
fonts()
pdf('../figures/gosemsim.pdf',height = 4, width = 8,family='FreeSans')
par(mfrow=c(1,3))
qqplot(controltoppairs.control$bpsemsim, toppairs$bpsemsim, xlab = 'Control pairs', ylab = 'Top pairs', main = '', type = 'l',
lwd = 2,cex.lab=1.25)
title('A. Biological Pathway', adj = 0, font.main = 1, cex.main = 1.5)
lines(bpx[['x']],bpx[['y']], col = 'red',lwd = 2)
lines(bpx2[['x']],bpx2[['y']], col = 'blue',lwd = 2)
legend('bottomright',c('Top 1000','Top 10,000','Top 100,000'), col = c('blue','red','black'),bty = 'n', pch = 19, cex = 1.25,
title = 'Dataset')
abline(a=0,b=1,lty=2,lwd=2)
qqplot(controltoppairs.control$ccsemsim, toppairs[1:100000,]$ccsemsim, xlab = 'Control pairs', ylab = 'Top pairs', main = '',
type = 'l', lwd = 2, cex.lab = 1.25)
title('B. Cellular Component', adj = 0, font.main = 1, cex.main = 1.5)
lines(ccx[['x']],ccx[['y']], col = 'red', lwd = 2)
lines(ccx2[['x']],ccx2[['y']], col = 'blue', lwd = 2)
legend('bottomright',c('Top 1000','Top 10,000','Top 100,000'), col = c('blue','red','black'),bty = 'n', pch = 19, cex = 1.25,
title = 'Dataset')
abline(a=0,b=1, lty = 2, lwd = 2)
qqplot(controltoppairs.control$mfsemsim, toppairs$mfsemsim, xlab = 'Control pairs', ylab = 'Top pairs', main = '', type = 'l',
lwd = 2, cex.lab = 1.25)
title('C. Molecular Function', adj = 0, font.main = 1, cex.main = 1.5)
lines(mfx[['x']],mfx[['y']], col = 'red', lwd = 2)
lines(mfx2[['x']],mfx2[['y']], col = 'blue', lwd = 2)
legend('bottomright',c('Top 1000','Top 10,000','Top 100,000'), col = c('blue','red','black'),bty = 'n', pch = 19, cex = 1.25,
title = 'Dataset')
abline(a=0,b=1, lty = 2, lwd = 2)
dev.off()
require(dplyr)
require(data.table)
string.type <- fread('../data/public/9606.protein.actions.v11.0.txt', header = T) %>% rowwise() %>%
mutate(pair = paste(sort(c(item_id_a,item_id_b)), collapse = '_'))
string.detailed <- fread('../data/public/9606.protein.links.detailed.v11.0.txt', header = T) %>% rowwise() %>%
mutate(pair = paste(sort(c(protein1,protein2)), collapse = '_'))
setDT(string.detailed)
setkey(string.detailed,pair)
setDT(string.type)
setkey(string.type,pair)
head(string.type)
head(string.type,50)
string.type <- arrange(string.type, pair)
head(string.type, 50)
pr <- '9606.ENSP00000000233_9606.ENSP00000248901'
View(filter(string.detailed.use, pair == pr))
View(filter(string.type, pair == pr))
string.detailed.use <- string.detailed[string.type$pair]
View(filter(string.detailed.use, pair == pr))
quantile(filter(string.detailed.use, cooccurence > 0)$combined_score)
quantile(filter(string.detailed.use, cooccurence > 0)$combined_score, probs = seq(0,1,0.1))
string.detailed.use.unique <- select(string.detailed.use, c('pair','combined_score')) %>%
unique()
length(unique(string.detailed.use.unique$pair))
head(string.type)
string.type.unique <- select(string.type, c('pair','score')) %>%
unique()
length(unique(string.type.unique$pair))
View(string.type.unique)
string.type.unique <- select(string.type, c('pair','score')) %>%
unique() %>%
left_join(string.detailed.use.unique, by = 'pair')
string.type.unique <- select(string.type, c('pair','score')) %>%
unique() %>%
left_join(string.detailed.use.unique, by = 'pair') %>%
arrange(pair)
View(string.type.unique)
pr <- '9606.ENSP00000000233_9606.ENSP00000256682'
View(filter(string.detailed.use, pair == pr))
View(filter(string.type, pair == pr))
View(string.type)
pr <- '9606.ENSP00000001008_9606.ENSP00000221114'
View(filter(string.detailed.use, pair == pr))
View(filter(string.type, pair == pr))
pr <- '9606.ENSP00000000233_9606.ENSP00000222547'
View(filter(string.detailed.use, pair == pr))
View(filter(string.type, pair == pr))
View(string.detailed.use)
View(filter(string.detailed.use, cooccurence > 0))
string.detailed.use.unique <- string.detailed.use %>%
unique()
length(unique(string.detailed.use$pair))
string.detailed.use.unique <- string.detailed.use[:,3:11] %>%
unique()
string.detailed.use.unique <- string.detailed.use[,3:11] %>%
unique()
View(string.detailed.use.unique)
View(filter(string.detailed.use, cooccurence > 0))
pr <- '9606.ENSP00000001146_9606.ENSP00000333212'
View(filter(string.detailed.use, pair == pr))
View(filter(string.type, pair == pr))
string.full <- fread('../data/public/9606.protein.links.full.v11.0.txt', header = T) %>% rowwise() %>%
mutate(pair = paste(sort(c(protein1,protein2)), collapse = '_'))
setDT(string.full)
setkey(string.full,pair)
head(string.full)
string.full.unique <- string.full[,3:17] %>% unique()
head(string.full.unique)
length(unique(string.full.unique$pair))
string.full.use <- string.full[string.type$pair]
string.full.use.unique <- string.full.use[,3:17] %>% unique()
View(filter(string.type, pair == pr))
View(filter(string.full.use, pair == pr))
View(filter(string.detailed.use, pair == pr))
pr <- '9606.ENSP00000000233_9606.ENSP00000222547'
View(filter(string.detailed.use, pair == pr))
View(filter(string.type, pair == pr))
View(filter(string.full.use, pair == pr))
pr <- '9606.ENSP00000000233_9606.ENSP00000248901'
View(filter(string.detailed.use, pair == pr))
View(filter(string.type, pair == pr))
View(filter(string.full.use, pair == pr))
filter(string.detailed.use, pair == pr)
filter(string.type, pair == pr)
source("https://bioconductor.org/biocLite.R")
biocLite('stringdb')
biocLite('STRINGdb')
require(STRINGdb)
stringdb <- STRINGdb$new(version = '11', species = 9606, score_threshold = 150)
stringdb <- STRINGdb$new(version = '10', species = 9606, score_threshold = 150)
class(stringdb)
str(stringdb)
intall <- stringdb$get_interactions()
pr <- '9606.ENSP00000263025_9606.ENSP00000282908'
pr <- '9606.ENSP00000000233_9606.ENSP00000248901'
View(filter(string.type, pair == pr))
View(filter(string.detailed.use, pair == pr))
View(filter(string.full.use, pair == pr))
string.full.mod <- string.full
colnames(string.full.mod)
write.table(string.full.mod[,1:16], file = '../data/public/stringdb/9606.protein.links.full.v11.0.modified.txt',
quote = F, row.names = F, sep = '\t')
string.full.mod$cooccurence <- 0
string.full.mod$neighborhood <- 0
string.full.mod$neighborhood_transferred <- 0
string.full.mod$homology <- 0
string.full.mod$fusion <- 0
write.table(string.full.mod[,1:16], file = '../data/public/stringdb/9606.protein.links.full.v11.0.modified.txt',
quote = F, row.names = F, sep = '\t')
sum(string.full.mod$cooccurence == 0)
hsap.genes <- readLines('../data/hsap.genes')
intfterc <- readRDS('../data/allsum.fterc.rds')
merc.sym <- readRDS('~/Documents/erc/data/saves/mamm63nt.trees.fterc.symm.rds')
pairmap <- readRDS('../data/pairmapmat.rds')
zfg <- sort(readLines('../data/public/zincfinger.gene'))
org <- sort(readLines('../data/public/olfactoryreceptor.gene'))
orgzfg <- sort(c(org,zfg))
hsap.genes.useforsim <- setdiff(hsap.genes,orgzfg)
badblastpairs <- fread('../data/allgeneshg19.pairbitscore.gteq0p1.tsv', header = T)
ndatafterc <- readRDS('../data/all.ndatasetsfterc.rds')
require(dplyr)
require(data.table)
require(tidyr)
require(ggplot2)
string.hg.alias.full <- fread('../data/public/stringhuman9606.protein.aliases.v11.0.txt', header = F)
string.hg.alias <-string.hg.alias.full %>%
mutate(V1 = gsub('9606\\.','',V1)) %>%
filter(grepl('Ensembl_gene',V3)) %>%
dplyr::select(c(1,2))
hg.ens.sym <- fread('../data/humanSymbolEnsembl.raw.map', header = T) %>%
dplyr::select(c(2,4)) %>% unique()
string.hg.alias.sym <- left_join(string.hg.alias, hg.ens.sym, by = c('V2'='hg19.ensGene.name2')) %>%
na.omit() %>% setnames(c('V1','V2','V3')) %>%
filter(V3 %in% hsap.genes)
rm('string.hg.alias')
rm('hg.ens.sym')
rm('string.hg.alias.full')
string.full <- fread('../data/public/stringdb/9606.protein.links.full.v11.0.newcombinedscore.txt', header = T) %>%
mutate(protein1 = gsub('9606\\.','',protein1)) %>%
mutate(protein2 = gsub('9606\\.','',protein2))
setDT(full)
setDT(string.hg.alias.sym)
string.full[string.hg.alias.sym,on=.(protein1=V1),g1:=i.V3]
string.full[string.hg.alias.sym,on=.(protein2=V1),g2:=i.V3]
string.full <- string.full[!is.na(g1) & !is.na(g2)]
string.full$interc <- calcpairid(string.full$g1,string.full$g2,intfterc)
string.full$merc <- calcpairid(string.full$g1, string.full$g2, merc.sym)
string.full$pair <- calcpairid(string.full$g1, string.full$g2, pairmap)
string.full$nds <- calcpairid(string.full$g1, string.full$g2, ndatafterc)
source('../code/funcsERCfromProjections.R')
string.full$interc <- calcpairid(string.full$g1,string.full$g2,intfterc)
string.full$merc <- calcpairid(string.full$g1, string.full$g2, merc.sym)
string.full$pair <- calcpairid(string.full$g1, string.full$g2, pairmap)
string.full$nds <- calcpairid(string.full$g1, string.full$g2, ndatafterc)
string.full <- fread('../data/public/stringdb/9606.protein.links.full.v11.0.newcombinedscore.txt', header = T) %>%
mutate(protein1 = gsub('9606\\.','',protein1)) %>%
mutate(protein2 = gsub('9606\\.','',protein2))
setDT(full)
setDT(string.hg.alias.sym)
string.full[string.hg.alias.sym,on=.(protein1=V1),g1:=i.V3]
string.full[string.hg.alias.sym,on=.(protein2=V1),g2:=i.V3]
string.full <- string.full[!is.na(g1) & !is.na(g2)]
string.full$interc <- calcpairid(string.full$g1,string.full$g2,intfterc)
string.full$merc <- calcpairid(string.full$g1, string.full$g2, merc.sym)
string.full$pair <- calcpairid(string.full$g1, string.full$g2, pairmap)
string.full$nds <- calcpairid(string.full$g1, string.full$g2, ndatafterc)
head(string.full)
string.full <- fread('../data/public/stringdb/9606.protein.links.full.v11.0.newcombinedscore.txt', header = T)
head(string.full)
string.full <- fread('../data/public/stringdb/9606.protein.links.full.v11.0.newcombinedscore.txt', header = F) %>%
mutate(protein1 = gsub('9606\\.','',V1)) %>%
mutate(protein2 = gsub('9606\\.','',V2))
setDT(full)
setDT(string.hg.alias.sym)
string.full[string.hg.alias.sym,on=.(protein1=V1),g1:=i.V3]
string.full[string.hg.alias.sym,on=.(protein2=V1),g2:=i.V3]
string.full <- string.full[!is.na(g1) & !is.na(g2)]
string.full$interc <- calcpairid(string.full$g1,string.full$g2,intfterc)
string.full$merc <- calcpairid(string.full$g1, string.full$g2, merc.sym)
string.full$pair <- calcpairid(string.full$g1, string.full$g2, pairmap)
string.full$nds <- calcpairid(string.full$g1, string.full$g2, ndatafterc)
string.full <- fread('../data/public/stringdb/9606.protein.links.full.v11.0.newcombinedscore.txt', header = F) %>%
mutate(protein1 = gsub('9606\\.','',V1)) %>%
mutate(protein2 = gsub('9606\\.','',V2))
setDT(string.full)
setDT(string.hg.alias.sym)
string.full[string.hg.alias.sym,on=.(protein1=V1),g1:=i.V3]
string.full[string.hg.alias.sym,on=.(protein2=V1),g2:=i.V3]
string.full <- string.full[!is.na(g1) & !is.na(g2)]
string.full$interc <- calcpairid(string.full$g1,string.full$g2,intfterc)
string.full$merc <- calcpairid(string.full$g1, string.full$g2, merc.sym)
string.full$pair <- calcpairid(string.full$g1, string.full$g2, pairmap)
string.full$nds <- calcpairid(string.full$g1, string.full$g2, ndatafterc)
View(string.full)
head(string.full)
sum(is.na(string.full$merc))
string.full <- fread('../data/public/stringdb/9606.protein.links.full.v11.0.newcombinedscore.txt', header = F) %>%
mutate(protein1 = gsub('9606\\.','',V1)) %>%
mutate(protein2 = gsub('9606\\.','',V2))
setnames(string.full,c('V1','V2','score','protein1','protein2'))
setDT(string.full)
setDT(string.hg.alias.sym)
string.full[string.hg.alias.sym,on=.(protein1=V1),g1:=i.V3]
string.full[string.hg.alias.sym,on=.(protein2=V1),g2:=i.V3]
string.full <- string.full[!is.na(g1) & !is.na(g2)]
string.full$interc <- calcpairid(string.full$g1,string.full$g2,intfterc)
string.full$merc <- calcpairid(string.full$g1, string.full$g2, merc.sym)
string.full$pair <- calcpairid(string.full$g1, string.full$g2, pairmap)
string.full$nds <- calcpairid(string.full$g1, string.full$g2, ndatafterc)
string.full.use <- filter(string.full, !g1 %in% orgzfg, !g2 %in% orgzfg,!pair %in% badblastpairs$pair) %>%
select(c('pair','interc','merc','mode','score','nds')) %>% filter(pair!=0)%>%
group_by(pair,mode) %>%
summarise(interc=interc[1],merc=merc[1],score=max(score),nds=nds[1])
string.full.use <- filter(string.full, !g1 %in% orgzfg, !g2 %in% orgzfg,!pair %in% badblastpairs$pair) %>%
select(c('pair','interc','merc','score','nds')) %>% filter(pair!=0)%>%
group_by(pair,mode) %>%
summarise(interc=interc[1],merc=merc[1],score=max(score),nds=nds[1])
string.full.use <- filter(string.full, !g1 %in% orgzfg, !g2 %in% orgzfg,!pair %in% badblastpairs$pair) %>%
select(c('pair','interc','merc','score','nds')) %>% filter(pair!=0)%>%
group_by(pair) %>% summarise(interc=interc[1],merc=merc[1],score=max(score),nds=nds[1])
View(string.full.use)
View(string.full)
string.full.use <- filter(string.full, !g1 %in% orgzfg, !g2 %in% orgzfg,!pair %in% badblastpairs$pair) %>%
select(c('pair','interc','merc','score','nds')) %>% filter(pair!=0,nds!=0)
View(string.full.use)
quantile(string.full.use$nds)
length(unique(string.full.use$pair))
string.full.use <- filter(string.full, !g1 %in% orgzfg, !g2 %in% orgzfg,!pair %in% badblastpairs$pair) %>%
select(c('pair','interc','merc','score','nds')) %>% filter(pair!=0,nds!=0)%>% unique()
?row_number
string.full.use <- filter(string.full, !g1 %in% orgzfg, !g2 %in% orgzfg,!pair %in% badblastpairs$pair) %>%
select(c('pair','interc','merc','score','nds')) %>% filter(pair!=0,nds!=0)%>%
group_by(pair) %>% arrange(desc(score)) %>% filter(row_number() <= 1)
head(string.full.use)
write.table(string.full.use, file = '../data/public/stringdb/string.full.use.cleaned.tsv',
quote = F, sep = '\t', row.names = F)
bgdbig <- readRDS('../data/toperc/bgdbig.rds')
set.seed(2)
qs.any <- quantile(string.full.use$score, c(0.9,0.95,0.98,0.99,1))
qs.any
string.full.controlpairs.with10pc <- ndataset.matched.controlpairs(filter(string.full.use,score > 562)$ndataset, nPerLevelmult = 10)
head(string.full.use)
qs.any <- quantile(string.full.use$score, c(0.9,0.95,0.98,0.99,1))
string.full.controlpairs.with10pc <- ndataset.matched.controlpairs(filter(string.full.use,score > 562)$nds, nPerLevelmult = 10)
plotbox2(string.full.controlpairs.with10pc$interc,xx = string.full.use$score,
yy = string.full.use$interc, breaksi = qs.any, leglabsi = c('Control','Top 10-5%','Top 5-2%','Top 2-1%','Top 1%'), titl = paste0('STRING PPIs'), xlab = 'Confidence score', ylab = 'Integrated ERC', ylimi=c(-4,11))
#dev.off()
qs.any <- quantile(string.full.use$score, c(0.98,0.99,0.995,0.999,1))
string.full.controlpairs.with10pc <- ndataset.matched.controlpairs(filter(string.full.use,score > 562)$nds, nPerLevelmult = 10)
qs.any <- quantile(string.full.use$score, c(0.98,0.99,0.995,0.999,1))
qs.any
string.full.controlpairs.with10pc <- ndataset.matched.controlpairs(filter(string.full.use,score > qs.any[1])$nds, nPerLevelmult = 10)
plotbox2(string.full.controlpairs.with10pc$interc,xx = string.full.use$score,
yy = string.full.use$interc, breaksi = qs.any, leglabsi = c('Control','Top 10-5%','Top 5-2%','Top 2-1%','Top 1%'), titl = paste0('STRING PPIs'), xlab = 'Confidence score', ylab = 'Integrated ERC', ylimi=c(-4,11))
qs.any <- quantile(string.full.use$score, c(0.98,0.99,0.995,0.998,1))
qs.any
plotbox2(string.full.controlpairs.with10pc$interc,xx = string.full.use$score,
yy = string.full.use$interc, breaksi = qs.any, leglabsi = c('Control','Top 10-5%','Top 5-2%','Top 2-1%','Top 1%'), titl = paste0('STRING PPIs'), xlab = 'Confidence score', ylab = 'Integrated ERC', ylimi=c(-4,11))
qs.any
qs.any <- c(900,950,975,990,999)
string.full.controlpairs.with10pc <- ndataset.matched.controlpairs(filter(string.full.use,score > qs.any[1])$nds, nPerLevelmult = 5)
plotbox2(string.full.controlpairs.with10pc$interc,xx = string.full.use$score,
yy = string.full.use$interc, breaksi = qs.any, leglabsi = c('Control','Top 10-5%','Top 5-2%','Top 2-1%','Top 1%'), titl = paste0('STRING PPIs'), xlab = 'Confidence score', ylab = 'Integrated ERC', ylimi=c(-4,11))
plotbox2(string.full.controlpairs.with10pc$interc,xx = string.full.use$score,
yy = string.full.use$interc, breaksi = qs.any, leglabsi = c('Control','Top 10-5%','Top 5-2%','Top 2-1%','Top 1%'), titl = paste0('STRING PPIs'), xlab = 'Confidence score', ylab = 'Integrated ERC', ylimi=c(-4,9))
plotbox2(string.full.controlpairs.with10pc$interc,xx = string.full.use$score,
yy = string.full.use$interc, breaksi = qs.any, leglabsi = c('Control','Top 10-5%','Top 5-2%','Top 2-1%','Top 1%'), titl = paste0('STRING PPIs'), xlab = 'Confidence score', ylab = 'Integrated ERC', ylimi=c(-4,8))
head(string.full.use)
qs.any <- quantile(arrange(string.full.use,desc(score))[1:1000000,],c(0.9,0.95,0.98,0.99))
qs.any <- quantile(arrange(string.full.use,desc(score))$score[1:1000000,],c(0.9,0.95,0.98,0.99))
qs.any <- quantile(arrange(string.full.use,desc(score))$score[1:1000000],c(0.9,0.95,0.98,0.99))
qs.any
plotbox2(string.full.controlpairs.with10pc$interc,xx = string.full.use$score,
yy = string.full.use$interc, breaksi = qs.any, leglabsi = c('Control','Top 10-5%','Top 5-2%','Top 2-1%','Top 1%'), titl = paste0('STRING PPIs'), xlab = 'Confidence score', ylab = 'Integrated ERC', ylimi=c(-4,8))
qs.any <- quantile(arrange(string.full.use,desc(score))$score[1:1000000],c(0.9,0.95,0.98,0.99,1))
qs.any
plotbox2(string.full.controlpairs.with10pc$interc,xx = string.full.use$score,
yy = string.full.use$interc, breaksi = qs.any, leglabsi = c('Control','Top 10-5%','Top 5-2%','Top 2-1%','Top 1%'), titl = paste0('STRING PPIs'), xlab = 'Confidence score', ylab = 'Integrated ERC', ylimi=c(-4,8))
pdf('../figures/stringboxplots/string.full.interc.boxplot.pdf', height = 6, width = 8,family='FreeSans')
plotbox2(string.full.controlpairs.with10pc$interc,xx = string.full.use$score,
yy = string.full.use$interc, breaksi = qs.any, leglabsi = c('Control','Top 10-5%','Top 5-2%','Top 2-1%','Top 1%'), titl = paste0('STRING PPIs'), xlab = 'Confidence score', ylab = 'Integrated ERC', ylimi=c(-4,8))
dev.off()
